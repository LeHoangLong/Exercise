import Track as tr
import numpy as np


track = tr.Track()
shape = list(track.getTrackShape())
shape.append(7)
shape.append(7)
shape.append(2)
pi = np.zeros(shape)

shape = list(track.getTrackShape())
shape.append(7)
shape.append(7)
shape.append(3)
shape.append(3)

gamma = 0.9


Q = np.zeros(shape)
C = np.zeros(shape)

trajectory = []

        


count = 0
for episodes in range(1):
    track.initializePosition()
    count = 0
    while (track.move() == False):
        action = (np.random.randint(-1, 2), np.random.randint(-1, 2))
        velocity = track.getVelocity()
        trajectory.append(((track.getPosition()[0], track.getPosition()[1], velocity[0], velocity[1]), action))
        count += 1
        track.increaseVelocity(action)
        #track.printCurrentPos()
        
    G = 0
    W = 1
    for i, t in enumerate(reversed(trajectory)):
        G = gamma * G - 1
        
        C[int(t[0][0]), int(t[0][1]), int(t[0][2]), int(t[0][3]), int(t[1][0]) + 1, int(t[1][1]) + 1] += W
        Q[int(t[0][0]), int(t[0][1]), int(t[0][2]), int(t[0][3]), int(t[1][0]) + 1, int(t[1][1]) + 1] += W / C[int(t[0][0]), int(t[0][1]), int(t[0][2]), int(t[0][3]), int(t[1][0]) + 1, int(t[1][1]) + 1] * (G - Q[int(t[0][0]), int(t[0][1]), int(t[0][2]), int(t[0][3]), int(t[1][0]) + 1, int(t[1][1]) + 1])
        
        prev_action = pi[t[0][0], t[0][1], t[0][2], t[0][3]]
        next_action = np.argmax(Q[t[0][0], t[0][1], t[0][2], t[0][3]])
        pi[t[0][0], t[0][1], t[0][2], t[0][3]][0] = next_action / 3
        pi[t[0][0], t[0][1], t[0][2], t[0][3]][1] = next_action % 3
        
        if (prev_action[0] != pi[t[0][0], t[0][1], t[0][2], t[0][3]][0]) or (prev_action[1] != pi[t[0][0], t[0][1], t[0][2], t[0][3]][1]):
            break
        W = W / np.size(C, -1)
    
while (track.move() == False):
    velocity = track.getVelocity()
    position = track.getPosition()
    action = pi[position[0], position[1], velocity[0], velocity[1]]
    trajectory.append(((track.getPosition()[0], track.getPosition()[1], velocity[0], velocity[1]), action))
    count += 1
    track.increaseVelocity(action)
    track.printCurrentPos()       